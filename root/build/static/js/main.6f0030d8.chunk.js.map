{"version":3,"sources":["app_component/mosam.component.jsx","app_component/form.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Mosam","props","className","city","icon","temp_celsius","min","max","minmaxTemp","temp_min","temp_max","desc","Form","id","error","role","onSubmit","loadmosam","type","name","autoComplete","placeholder","App","getweather","e","a","preventDefault","target","elements","value","country","fetch","api_call","json","response","console","log","setState","sys","celsius","calcelsius","main","temp","weather","description","get_weathericon","state","undefined","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","Math","floor","icons","rangeid","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"sRAgCeA,MA9BF,SAACC,GACV,OAEI,yBAAKC,UAAU,wBACX,yBAAKA,UAAU,cAEX,4BAAKD,EAAME,MACX,wBAAID,UAAU,QACV,uBAAGA,UAAS,aAAQD,EAAMG,KAAd,iBAGhBH,EAAMI,aAAc,wBAAIH,UAAU,QAAQD,EAAMI,aAA5B,SAAsD,KAO1F,SAAoBC,EAAIC,GACpB,GAAGD,GAAKC,EAEL,OACC,4BACI,0BAAML,UAAU,QAAQI,EAAxB,SACA,0BAAMJ,UAAU,QAAQK,EAAxB,UAZKC,CAAWP,EAAMQ,SAASR,EAAMS,UACjC,wBAAIR,UAAU,QAAQD,EAAMU,S,MCiB7BC,MA9BH,SAACX,GACT,OACI,yBAAKC,UAAU,aACX,yBAAKA,UAAU,uBAAuBW,GAAG,SAAzC,qBACA,6BAAMZ,EAAMa,MAqBnB,yBAAKZ,UAAU,0BAA0Ba,KAAK,SAA9C,wCArBiC,MAC1B,0BAAMC,SAAUf,EAAMgB,WACtB,yBAAKf,UAAU,OACX,yBAAKA,UAAU,wBACX,2BAAOgB,KAAK,OAAOhB,UAAU,eAAeiB,KAAK,OAAOC,aAAa,MAAMC,YAAY,UAE3F,yBAAKnB,UAAU,YACX,2BAAOgB,KAAK,OAAOhB,UAAU,eAAeiB,KAAK,UAAUC,aAAa,MAAMC,YAAY,aAE9F,yBAAKnB,UAAU,iCACZ,4BAAQA,UAAU,iBAAlB,oBC0FJoB,E,kDA/Fb,aAAc,IAAD,8BACX,gBA0DFC,WA3Da,uCA2DF,WAAMC,GAAN,qBAAAC,EAAA,yDACTD,EAAEE,iBACIvB,EAAKqB,EAAEG,OAAOC,SAASzB,KAAK0B,MAC5BC,EAAQN,EAAEG,OAAOC,SAASE,QAAQD,OACrC1B,IAAM2B,EAJA,iCAMYC,MAAM,oDAAD,OAAqD5B,EAArD,YAA6D2B,EAA7D,kBApEhB,qCA8DD,cAMHE,EANG,gBAQYA,EAASC,OARrB,OAQHC,EARG,OASTC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACdlC,KAAK,GAAD,OAAI+B,EAASf,KAAb,YAAqBe,EAASI,IAAIR,SACtCS,QAAQ,EAAKC,WAAWN,EAASO,KAAKC,MACtChC,SAAS,EAAK8B,WAAWN,EAASO,KAAK/B,UACvCD,SAAS,EAAK+B,WAAWN,EAASO,KAAKhC,UACvCE,KAAKuB,EAASS,QAAQ,GAAGC,cAExB,EAAKC,gBAAgB,EAAKzC,KAAK8B,EAASS,QAAQ,GAAG9B,IAjB3C,wBAoBT,EAAKwB,SAAS,CAACvB,OAAM,IApBZ,4CA3DE,sDAEX,EAAKgC,MAAM,CACT3C,UAAK4C,EACLjB,aAAQiB,EACR3C,UAAK2C,EACLN,UAAKM,EACLR,aAAQQ,EACRrC,cAASqC,EACTtC,cAASsC,EACTpC,KAAK,GACLG,OAAM,GAGR,EAAKV,KAAK,CACR4C,aAAa,kBACbC,QAAQ,WACRC,KAAK,mBACLC,KAAK,UACLC,WAAW,SACXC,MAAM,eACNC,OAAO,cArBE,E,uDAyBFZ,GAGT,OADQa,KAAKC,MAAMd,EAAK,U,sCAIVe,EAAMC,GACpB,QAAO,GACL,KAAKA,GAAS,KAAKA,GAAS,IAC1BC,KAAKtB,SAAS,CAACjC,KAAKuD,KAAKvD,KAAK4C,eAE9B,MACF,KAAKU,GAAS,KAAKA,GAAS,IAC1BC,KAAKtB,SAAS,CAACjC,KAAKuD,KAAKvD,KAAK6C,UAC9B,MACF,KAAKS,GAAS,KAAKA,GAAS,IAC1BC,KAAKtB,SAAS,CAACjC,KAAKuD,KAAKvD,KAAK8C,OAC9B,MACF,KAAKQ,GAAS,KAAKA,GAAS,IAC1BC,KAAKtB,SAAS,CAACjC,KAAKuD,KAAKvD,KAAK+C,OAC9B,MACF,KAAKO,GAAS,KAAKA,GAAS,IAC1BC,KAAKtB,SAAS,CAACjC,KAAKuD,KAAKvD,KAAKgD,aAC9B,MACF,KAAe,MAAVM,EACHC,KAAKtB,SAAS,CAACjC,KAAKuD,KAAKvD,KAAKiD,QAC9B,MACF,KAAKK,GAAS,KAAKA,GAAS,IAC1BC,KAAKtB,SAAS,CAACjC,KAAKuD,KAAKvD,KAAKkD,SAC9B,MACF,QACEK,KAAKtB,SAAS,CAACjC,KAAKuD,KAAKvD,KAAKkD,Y,+BA4BlC,OACA,yBAAKpD,UAAU,OACd,kBAAC,EAAD,CAAMe,UAAW0C,KAAKpC,WAAYT,MAAO6C,KAAKb,MAAMhC,QACpD,kBAAC,EAAD,CAAOX,KAAMwD,KAAKb,MAAM3C,KAAM2B,QAAS6B,KAAKb,MAAMhB,QAASzB,aAAcsD,KAAKb,MAAMP,QAAS7B,SAAUiD,KAAKb,MAAMpC,SAAUD,SAAUkD,KAAKb,MAAMrC,SAAUE,KAAMgD,KAAKb,MAAMnC,KAC5KP,KAAMuD,KAAKb,MAAM1C,Y,GAzFJwD,IAAMC,WCEJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAhE,GACLqB,QAAQrB,MAAMA,EAAMiE,a","file":"static/js/main.6f0030d8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Mosam =(props)=>{\r\n    return(\r\n      \r\n        <div className=\"container text-light\">\r\n            <div className=\"cards pt-4\">\r\n             \r\n                <h1>{props.city}</h1>\r\n                <h5 className=\"py-4\">\r\n                    <i className={`wi ${props.icon} display-1`}/>\r\n                </h5>\r\n                \r\n               {props.temp_celsius?(<h1 className=\"py-2\">{props.temp_celsius}&deg;c</h1>):null}\r\n                {minmaxTemp(props.temp_min,props.temp_max)}\r\n                <h4 className=\"py-3\">{props.desc}</h4>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nfunction minmaxTemp(min,max){\r\n    if(min&&max)\r\n    {\r\n       return(\r\n        <h3>\r\n            <span className=\"px-4\">{min}&deg;c</span>\r\n            <span className=\"px-4\">{max}&deg;c</span>\r\n\r\n        </h3>\r\n    );\r\n}\r\n}\r\nexport default Mosam;\r\n","import React from'react';\r\nimport\"./form.style.css\";\r\nconst Form= (props)=>{\r\n    return(\r\n        <div className=\"container\">\r\n            <div className=\"display-4 text-light\" id=\"title\">mosam☁️</div>\r\n            <div>{props.error?error():null}</div>\r\n            <form onSubmit={props.loadmosam}>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-3 offset-md-2\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"city\"/>\r\n                </div>\r\n                <div className=\"col-md-3\">\r\n                    <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"country\"/>\r\n                </div>\r\n                <div className=\"col-md-3 mt-md-0 text-md-left\">\r\n                   <button className=\"btn btn-light\">Get Weather</button> \r\n                </div>\r\n            </div>\r\n            </form>\r\n\r\n        </div>\r\n    );\r\n};\r\nfunction error()\r\n{\r\n    return(\r\n     <div className=\"alert alert-danger mx-5\" role=\"alert\">\r\n         Please enter valid city and country!\r\n     </div>\r\n    );\r\n}\r\nexport default Form;","import React from\"react\";\n\nimport\"./App.css\";\n\nimport\"weather-icons/css/weather-icons.css\";\nimport\"bootstrap/dist/css/bootstrap.min.css\";\nimport Mosam from\"./app_component/mosam.component\";\nimport Form from\"./app_component/form.component\";\nconst API_key=\"cbcdd0541b10be68e1b95edca9109ef0\";\n\nclass App extends React.Component{\n  constructor(){\n    super();\n    this.state={\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celsius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      desc:\"\",\n      error:false\n    };\n\n    this.icon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    }\n  }\n  \n  calcelsius(temp)\n  {\n    let cel=Math.floor(temp-273.15)\n    return cel;\n  }\n\n  get_weathericon(icons,rangeid){\n    switch(true){\n      case rangeid>=200&&rangeid<=232:\n        this.setState({icon:this.icon.Thunderstorm});\n       \n        break;\n      case rangeid>=300&&rangeid<=321:\n        this.setState({icon:this.icon.Drizzle});\n        break;\n      case rangeid>=500&&rangeid<=531:\n        this.setState({icon:this.icon.Rain});\n        break;\n      case rangeid>=600&&rangeid<=622:\n        this.setState({icon:this.icon.Snow});\n        break;        \n      case rangeid>=701&&rangeid<=781:\n        this.setState({icon:this.icon.Atmosphere});\n        break;    \n      case rangeid===800:\n        this.setState({icon:this.icon.Clear});\n        break;\n      case rangeid>=801&&rangeid<=804:\n        this.setState({icon:this.icon.Clouds});\n        break;\n      default:\n        this.setState({icon:this.icon.Clouds});            \n    }\n  }\n  getweather=async(e)=>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n    if(city&&country)\n    {\n    const api_call=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n\n    const response=await api_call.json();\n    console.log(response);\n    this.setState({\n    city:`${response.name},${response.sys.country}`,\n    celsius:this.calcelsius(response.main.temp),\n    temp_max:this.calcelsius(response.main.temp_max),\n    temp_min:this.calcelsius(response.main.temp_min),\n    desc:response.weather[0].description,\n});\n     this.get_weathericon(this.icon,response.weather[0].id)\n  }\n  else{\n    this.setState({error:true});\n  }\n};\n\n  render(){\n    return(\n    <div className=\"App\">\n     <Form loadmosam={this.getweather} error={this.state.error}/>\n     <Mosam city={this.state.city} country={this.state.country} temp_celsius={this.state.celsius} temp_max={this.state.temp_max} temp_min={this.state.temp_min} desc={this.state.desc}\n     icon={this.state.icon}/>\n    </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}